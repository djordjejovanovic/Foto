package com.example.demo.controller;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.persistence.NamedNativeQuery;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.example.demo.AESEncryptionDecryption;
import com.example.demo.repository.UserRepository;

import model.Role;
import model.User;

@Controller
@RequestMapping(value = "usercontroller")
public class UserController {

	@Autowired
	UserRepository ur;
	
	@RequestMapping(value = "register", method = RequestMethod.POST)
	public String register(String email, String firstname, String lastname, String username, String password, String repassword, HttpServletRequest request,
				Model m) {
		try {
			
			User existUser = ur.findByUsername(username);

			if (existUser != null) {
				request.setAttribute("porukaReg", "Username already exists.");
				return "login/registration";
			}
			
			if(!password.equals(repassword)) {
				request.setAttribute("porukaReg", "Those passwords didn't match. Try again.");
				return "login/registration";
			}

			
			User u = new User();
			
			Role role = new Role();
			role.setRoleId(2);
			
			u.setRole(role);
			
			SimpleDateFormat dt1 = new SimpleDateFormat("dd-MM-yyyyy");
			Date now = new Date();
			u.setRegistrationDate(new Date());
			
			u.setEmail(email);
			u.setFirstName(firstname);
			u.setLastName(lastname);
			u.setUsername(username);
			
			AESEncryptionDecryption aes = new AESEncryptionDecryption();
			String encryptedPassw = aes.encrypt(password);
			u.setPassword(encryptedPassw);
			
			ur.save(u);
			
			request.setAttribute("porukaLogSucc", "Successful registration. Login to your account.");
			request.setAttribute("user", u);
			
			request.getSession().setAttribute("user", u);
			request.getSession().setAttribute("userid", u.getUserId());
			m.addAttribute("user", u);
			
			return "login/login";
			
		} catch (Exception e1) {
			e1.printStackTrace();
			return "login/registration";
		}
	}
	
	@RequestMapping(value = "login", method = RequestMethod.POST)
	public String login(String username, String password, HttpServletRequest request, Model m) {
		if (username.isEmpty() || password.isEmpty())
			return "login/login";

		try {
			User user = ur.findByUsername(username);
			
			if (user == null) {
				request.setAttribute("porukaLog", "Wrong username or password.");
				return "login/login";
			}
			
			AESEncryptionDecryption aes = new AESEncryptionDecryption();
			String encryptedPassw = aes.encrypt(password);

			if (!user.getPassword().equals(encryptedPassw)) {
				request.setAttribute("porukaLog", "Wrong username or password.");
				return "login/login";
			}

			request.getSession().setAttribute("user", user);
			request.getSession().setAttribute("userid", user.getUserId());
			request.getSession().setAttribute("username", user.getUsername());
			request.getSession().setAttribute("firstname", user.getFirstName());
			request.getSession().setAttribute("lastname", user.getLastName());
			request.getSession().setAttribute("email", user.getEmail());
			request.getSession().setAttribute("roleid", user.getRole().getRoleId());
			
			m.addAttribute("user", user);
			
			return "redirect:/";

		} catch (Exception e) {
			return "login/login";
		}
		
	}
	
	@RequestMapping(value = "logout", method = RequestMethod.GET)
	public String logout(HttpServletRequest request) {
		HttpSession session = request.getSession();
		
		if(session != null)
			session.invalidate();
		
		return "login/login";
	}
	
	@RequestMapping(value = "updateUser", method = RequestMethod.POST)
	public String updateUser(String username, String firstname, String lastname, String email, HttpServletRequest request) {
		
		int userid = (int) request.getSession().getAttribute("userid");
		User user = ur.findById(userid);
		
		if(user != null) {
			user.setUsername(username);
			user.setFirstName(firstname);
			user.setLastName(lastname);
			user.setEmail(email);
			
			ur.save(user);
			
			request.getSession().setAttribute("user", user);
			request.getSession().setAttribute("username", user.getUsername());
			request.getSession().setAttribute("firstname", user.getFirstName());
			request.getSession().setAttribute("lastname", user.getLastName());
			request.getSession().setAttribute("email", user.getEmail());
			
			request.setAttribute("porukaUpdateSucc", "User succesfuly updated.");
		}
		
		return "login/account_settings";
	}
	
	@RequestMapping(value = "changePassword", method = RequestMethod.POST)
	public String changePassword(String oldpassword, String newpassword, String renewpassword, HttpServletRequest request) {
		
			int userid = (int) request.getSession().getAttribute("userid");
			User user = ur.findById(userid);
						
			if(user != null && !user.getPassword().isEmpty()) {
				
				AESEncryptionDecryption aes = new AESEncryptionDecryption();
				String encryptedPassw = aes.encrypt(oldpassword);
				
				if(!user.getPassword().equals(encryptedPassw)) {
					request.setAttribute("porukaPassWr", "Wrong old password.");
					return "login/account_settings";
				} else if (!newpassword.equals(renewpassword)) {
					request.setAttribute("porukaPassWr", "Those passwords didn't match. Try again.");
					return "login/account_settings";
				}
				
				String newEncrPassw = aes.encrypt(newpassword);
				user.setPassword(newEncrPassw);
				ur.save(user);
			}
			
			request.setAttribute("porukaPassSucc", "Password succesfuly changed.");
			return "login/account_settings";
	}
	
	@RequestMapping(value = "viewAllUsers", method = RequestMethod.GET)
	public String viewAllUsers(HttpServletRequest request, Model m) {
		
		if (request.getSession().getAttribute("user") != null) {

			int roleid = (int) request.getSession().getAttribute("roleid");

			if (roleid == 1) {
				List<User> users = ur.findAll();
				request.setAttribute("users", users);
				m.addAttribute("users", users);

				return "users/users";
			}
		}
		
		return "redirect:/";
	}

}
